plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion Versions.compileSdkVersion

    defaultConfig {
        applicationId "lt.vilnius.tvarkau"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionString

        resConfigs "lt", "en"

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            multiDexEnabled = true
        }
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        unitTests.all {
            maxHeapSize '2048m'
            minHeapSize '1600m'
            jvmArgs "-XX:MaxPermSize=1024m"
        }
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation SupportLibraries.fragment
    implementation SupportLibraries.appcompat_v7
    implementation SupportLibraries.recyclerview_v7
    implementation SupportLibraries.design
    implementation SupportLibraries.preference_v14

    implementation Libs.maps
    implementation Libs.location
    implementation Libs.places

    implementation Libs.firebase_core
    implementation Libs.firebase_perf

    implementation Libs.butterknife
    kapt Libs.butterknife_compiler

    implementation Libs.glide

    implementation Libs.retrofit
    implementation Libs.retrofit_converter_gson
    implementation Libs.retrofit_adapter_rx
    implementation Libs.retrofit_adapter_rx2

    implementation Libs.gson

    implementation Libs.dagger
    kapt Libs.dagger_compiler

    compileOnly Libs.javax_annotation

    implementation Libs.view_page_indicator
    implementation Libs.event_bus

    implementation Libs.stetho
    implementation Libs.stetho_okhttp3

    implementation Libs.mixpanel

    implementation Libs.okhttp
    implementation Libs.okhttp_logging_interceptor

    implementation Libs.rx_android
    implementation Libs.rx_java
    implementation Libs.rx_java_2
    implementation Libs.rx_android_2

    implementation Libs.three_ten
    implementation Libs.photo_view

    implementation Libs.kotlin_stdlib
    implementation Libs.timber

    implementation Libs.easy_image

    implementation Libs.crashlytics

    implementation Libs.preferx

    api Libs.oauth

    debugImplementation Libs.leak_canary
    releaseImplementation Libs.leak_canary_no_op
    testDebugImplementation Libs.leak_canary_no_op

    kaptTest Libs.dagger_compiler
    testImplementation TestLibraries.junit
    testImplementation TestLibraries.robolectric
    testImplementation TestLibraries.kotlin_test
    testImplementation TestLibraries.mockito_kotlin
    testImplementation TestLibraries.fest_util
    testImplementation TestLibraries.fest_reflect
    testImplementation TestLibraries.assertj_android
    testImplementation TestLibraries.okhttp_mockwebserver
}

task versionName() {
    description "Prints version name"

    println android.defaultConfig.versionName
}

// https://github.com/ben-manes/gradle-versions-plugin
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
